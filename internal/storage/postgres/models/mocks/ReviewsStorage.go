// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "greenlight/proj/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// ReviewsStorage is an autogenerated mock type for the ReviewsStorage type
type ReviewsStorage struct {
	mock.Mock
}

// GetForMovie provides a mock function with given fields: ctx, movieID
func (_m *ReviewsStorage) GetForMovie(ctx context.Context, movieID int64) ([]models.Review, error) {
	ret := _m.Called(ctx, movieID)

	if len(ret) == 0 {
		panic("no return value specified for GetForMovie")
	}

	var r0 []models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.Review, error)); ok {
		return rf(ctx, movieID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.Review); ok {
		r0 = rf(ctx, movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, movieID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReviewsStorage creates a new instance of ReviewsStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewsStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewsStorage {
	mock := &ReviewsStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
