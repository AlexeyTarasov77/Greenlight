// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	fields "greenlight/proj/internal/domain/fields"
	filters "greenlight/proj/internal/domain/filters"

	mock "github.com/stretchr/testify/mock"

	models "greenlight/proj/internal/domain/models"
)

// MoviesStorage is an autogenerated mock type for the MoviesStorage type
type MoviesStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MoviesStorage) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MoviesStorage) Get(ctx context.Context, id int) (*models.Movie, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Movie, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Movie); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, title, year, runtime, genres
func (_m *MoviesStorage) Insert(ctx context.Context, title string, year int32, runtime fields.MovieRuntime, genres []string) (*models.Movie, error) {
	ret := _m.Called(ctx, title, year, runtime, genres)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, fields.MovieRuntime, []string) (*models.Movie, error)); ok {
		return rf(ctx, title, year, runtime, genres)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, fields.MovieRuntime, []string) *models.Movie); ok {
		r0 = rf(ctx, title, year, runtime, genres)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, fields.MovieRuntime, []string) error); ok {
		r1 = rf(ctx, title, year, runtime, genres)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, title, genres, _a3
func (_m *MoviesStorage) List(ctx context.Context, title string, genres []string, _a3 filters.Filters) ([]models.Movie, int, error) {
	ret := _m.Called(ctx, title, genres, _a3)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Movie
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, filters.Filters) ([]models.Movie, int, error)); ok {
		return rf(ctx, title, genres, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, filters.Filters) []models.Movie); ok {
		r0 = rf(ctx, title, genres, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, filters.Filters) int); ok {
		r1 = rf(ctx, title, genres, _a3)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []string, filters.Filters) error); ok {
		r2 = rf(ctx, title, genres, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, movie
func (_m *MoviesStorage) Update(ctx context.Context, movie *models.Movie) (*models.Movie, error) {
	ret := _m.Called(ctx, movie)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Movie) (*models.Movie, error)); ok {
		return rf(ctx, movie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Movie) *models.Movie); ok {
		r0 = rf(ctx, movie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Movie) error); ok {
		r1 = rf(ctx, movie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMoviesStorage creates a new instance of MoviesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMoviesStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MoviesStorage {
	mock := &MoviesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
