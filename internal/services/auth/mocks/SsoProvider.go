// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "greenlight/proj/internal/services/auth"

	mock "github.com/stretchr/testify/mock"

	models "greenlight/proj/internal/domain/models"
)

// SsoProvider is an autogenerated mock type for the SsoProvider type
type SsoProvider struct {
	mock.Mock
}

// ActivateUser provides a mock function with given fields: ctx, plainToken
func (_m *SsoProvider) ActivateUser(ctx context.Context, plainToken string) (*models.User, error) {
	ret := _m.Called(ctx, plainToken)

	if len(ret) == 0 {
		panic("no return value specified for ActivateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, plainToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, plainToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, plainToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, params
func (_m *SsoProvider) GetUser(ctx context.Context, params auth.GetUserParams) (*models.User, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.GetUserParams) (*models.User, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.GetUserParams) *models.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.GetUserParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *SsoProvider) Login(ctx context.Context, email string, password string) (*auth.TokensDTO, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *auth.TokensDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*auth.TokensDTO, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *auth.TokensDTO); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokensDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewActivationToken provides a mock function with given fields: ctx, email
func (_m *SsoProvider) NewActivationToken(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for NewActivationToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, email, username, password
func (_m *SsoProvider) Register(ctx context.Context, email string, username string, password string) (*auth.SignupData, error) {
	ret := _m.Called(ctx, email, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *auth.SignupData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*auth.SignupData, error)); ok {
		return rf(ctx, email, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *auth.SignupData); ok {
		r0 = rf(ctx, email, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.SignupData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, email, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: ctx, token
func (_m *SsoProvider) VerifyToken(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSsoProvider creates a new instance of SsoProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSsoProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SsoProvider {
	mock := &SsoProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
